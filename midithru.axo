<objdefs appVersion="1.0.12">
   <obj.normal id="midithru" uuid="b3868bd5-625c-4482-9948-a34e59fe2a21">
      <sDescription>an object to forward midi from one device to another
note: does now handle sysex or clock</sDescription>
      <author>Mark Harris</author>
      <license>GPL</license>
      <inlets/>
      <outlets/>
      <displays/>
      <params/>
      <attribs>
         <combo name="input">
            <MenuEntries>
               <string>omni</string>
               <string>din</string>
               <string>usb host port 1</string>
               <string>usb host port 2</string>
               <string>usb host port 3</string>
               <string>usb host port 4</string>
               <string>internal port 1</string>
               <string>internal port 2</string>
               <string>usb device port 1</string>
            </MenuEntries>
            <CEntries>
               <string>true</string>
               <string>dev == MIDI_DEVICE_DIN &amp;&amp; port == 1</string>
               <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 1</string>
               <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 2</string>
               <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 3</string>
               <string>dev == MIDI_DEVICE_USB_HOST &amp;&amp; port == 4</string>
               <string>dev == MIDI_DEVICE_INTERNAL &amp;&amp; port == 1</string>
               <string>dev == MIDI_DEVICE_INTERNAL &amp;&amp; port == 2</string>
               <string>dev == MIDI_DEVICE_USB_DEVICE &amp;&amp; port == 1</string>
            </CEntries>
         </combo>
         <combo name="output">
            <MenuEntries>
               <string>din</string>
               <string>usb host port 1</string>
               <string>usb host port 2</string>
               <string>usb host port 3</string>
               <string>usb host port 4</string>
               <string>internal port 1</string>
               <string>internal port 2</string>
               <string>usb device port 1</string>
            </MenuEntries>
            <CEntries>
               <string>MIDI_DEVICE_DIN, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 1</string>
               <string>MIDI_DEVICE_USB_HOST, 2</string>
               <string>MIDI_DEVICE_USB_HOST, 3</string>
               <string>MIDI_DEVICE_USB_HOST, 4</string>
               <string>MIDI_DEVICE_INTERNAL, 1</string>
               <string>MIDI_DEVICE_INTERNAL, 2</string>
               <string>MIDI_DEVICE_USB_DEVICE, 1</string>
            </CEntries>
         </combo>
         <combo name="led">
            <MenuEntries>
               <string>on</string>
               <string>off</string>
            </MenuEntries>
            <CEntries>
               <string>true</string>
               <string>false</string>
            </CEntries>
         </combo>
      </attribs>
      <code.declaration><![CDATA[int 		flash_cnt=0;
bool 	flash_state = false;
const int FLASH_LEN = 0x100;]]></code.declaration>
      <code.init><![CDATA[if(attr_led) {
        sysmon_disable_blinker();
        palSetPadMode(LED2_PORT,LED2_PIN,PAL_MODE_OUTPUT_PUSHPULL);
}
flash_cnt = 0;
flash_state = false;]]></code.init>
      <code.krate><![CDATA[if(attr_led) {
	if(flash_cnt > 0) flash_cnt--;
	bool fs = flash_cnt > 0;
	if(fs!=flash_state) {
		palWritePad(LED2_PORT,LED2_PIN,fs);
		flash_state = fs;
	}
    }]]></code.krate>
      <code.midihandler><![CDATA[if(attr_input) 
{
    uint8_t status_type = status & 0xF0;

    switch (status)
    { 
    case MIDI_TIMING_CLOCK: 
    case MIDI_MEASURE_END:
    case MIDI_START:
    case MIDI_CONTINUE:
    case MIDI_STOP: 
        {
            MidiSend1((midi_device_t) attr_output,status);
        }
    break;
    }

    switch (status_type)
    {
    case MIDI_CONTROL_CHANGE:
    case MIDI_NOTE_OFF:
    case MIDI_NOTE_ON:
    case MIDI_POLY_PRESSURE:
    case MIDI_PITCH_BEND: 
        {
            MidiSend3((midi_device_t) attr_output,status,data1,data2);
            flash_cnt = FLASH_LEN;
        }
    break;

    case MIDI_PROGRAM_CHANGE:
    case MIDI_CHANNEL_PRESSURE: 
        {
            MidiSend2((midi_device_t) attr_output,status,data1);
            flash_cnt = FLASH_LEN;
        }
    break;
    }
}]]></code.midihandler>
   </obj.normal>
</objdefs>